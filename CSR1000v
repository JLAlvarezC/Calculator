import json, requests
from tabulate import *
from netmiko import ConnectHandler
from ncclient import manager
import xml.dom.minidom
import xmltodict
requests.packages.urllib3.disable_warnings()
def clear():
    print('\n'*100)
while True:
    print("\n\n### Programar Router Cisco CSR1000v con una o más interfaces de GigabitEthernet. ###\n")
    print("\n\n### NOTA IMPORTANTE: Antes de Utilizar el programa, aseguráte de las Interfaces 'Fisicas' del Router... ###\n")  
    x=input("Elige una Opción:\n\n1 Ver Interfaces del Router\n2 Configurar/Eliminar Interfaz\n3 Ver Tabla de Routing \n4 Versión de IOS, Hostame, Serial Number, Modelo \nSi no deseas continuar, escribe 0\n")   
    if x == '1':
        clear()
        api_url_Interfaces="https://192.168.214.101/restconf/data/ietf-interfaces:interfaces/interface"
        headers = {"Accept":"application/yang-data+json","Content-Type":"application/yang-data+json"}
        basic_auth = ("cisco","cisco123!")
        resp = requests.get(api_url_Interfaces,auth=basic_auth,headers=headers,verify=False)
        resp_json=resp.json()
        interface=[]
        i=0       
        for item in resp_json ["ietf-interfaces:interface"]:
            i+=1
            interfaces=[i,item["name"],item["ietf-ip:ipv4"]]
            interface.append(interfaces)
        TableHeadres=["Number","Name","IP Address","MAC"]
        print(tabulate(interface,TableHeadres))
        m = manager.connect(host="192.168.214.101", port=830, username="cisco", password="cisco123!",hostkey_verify=False)
        netconf_filter = """ 
        <filter> 
        <interfaces-state xmlns="urn:ietf:params:xml:ns:yang:ietf-interfaces"/> 
        </filter>
        """
        netconf_reply = m.get(filter=netconf_filter)
        netconf_reply_dict = xmltodict.parse(netconf_reply.xml)
        PhyAdd_List=[]
        i=0
        for interface in netconf_reply_dict ["rpc-reply"]["data"]["interfaces-state"]["interface"]:
            i+=1
            PhyAdd=(i,interface["phys-address"])
            PhyAdd_List.append(PhyAdd)
        TableHeadres=["Number","MAC"]
        print(tabulate(PhyAdd_List,TableHeadres))       
    elif x == '2':
        clear()
        y = input("Indique la interfaz a configurar: \na. Interfaz\nb. SubInterfaz\nc. Loopback\nd. Eliminar/Eliminar Configuración de Interfaz ")
        if y == 'a':
            InterNumber=input('Indique el numero de la Interfaz (GigabitEthernet): ')            
            ipAdd=input("Indique direccionamiento: ")
            MacAdd=input("Indique la mascara: ")
            desc=input("Indique una descripcion: ")
            if desc == '\n':
                desc='description'
            api_urlGi = "https://192.168.214.101/restconf/data/ietf-interfaces:interfaces/interface=GigabitEthernet"+InterNumber
            headers = {"Accept":"application/yang-data+json","Content-Type":"application/yang-data+json"}
            basic_auth = ("cisco","cisco123!")
            yangConfig = {
                    "ietf-interfaces:interface": {
                    "name": "GigabitEthernet"+InterNumber,
                    "description": desc,
                    "type": "iana-if-type:ethernetCsmacd",
                    "enabled": True,
                    "ietf-ip:ipv4": {
                            "address": [
                                            {
                                                "ip": ipAdd,
                                                "netmask": MacAdd
                                            }
                                        ]
                                    },
                    "ietf-ip:ipv6": {}
                                                }
                        }

            resp = requests.put(api_urlGi,data=json.dumps(yangConfig),auth=basic_auth,headers=headers,verify=False)
            if(resp.status_code >= 200 and resp.status_code <= 299):
                print("\n INTERFAZ CREADA CORRECTAMENTE !!!")   
            elif(resp.status_code == 400):
                print("\n DATO INCOMPLETO, MAL INTRODUCIDO O DIRECCIONAMIENTO REPETIDO")      
        elif y == 'b':
            InterNumber=input('Indique el numero de la SubInterfaz (por ejemplo 1.3): ')
            vlan=input("indique VLAN: ")            
            ipAdd=input("Indique direccionamiento: ")
            MacAdd=input("Indique la mascara: ")
            desc=input("Indique la descripcion: ")
            config_commands=['int Giga '+InterNumber,'encapsulation dot1Q '+vlan,'ip add '+ipAdd+' '+MacAdd,'description '+desc,'no shutdown']
            sshcli=ConnectHandler(device_type='cisco_ios',host='192.168.214.101',port=22,username='cisco',password='cisco123!')
            output=sshcli.send_config_set(config_commands)
            print("Interfaz Configurada, confirme en la Opcion a")
        elif y == 'c':
            InterNumber=input('Indique el numero de la Interfaz (LoopBack): ')            
            ipAdd=input("Indique direccionamiento: ")
            MacAdd=input("Indique la mascara: ")
            desc=input("Indique la descripcion: ")
            api_urlLo = "https://192.168.214.101/restconf/data/ietf-interfaces:interfaces/interface=Loopback"+InterNumber
            #Headers&BasicAuth()
            headers = {"Accept":"application/yang-data+json","Content-Type":"application/yang-data+json"}
            basic_auth = ("cisco","cisco123!")
            yangConfig = {
                    "ietf-interfaces:interface": {
                    "name": "Loopback"+InterNumber,
                    "description": desc,
                    "type": "iana-if-type:softwareLoopback",
                    "enabled": True,
                    "ietf-ip:ipv4": {
                            "address": [
                                            {
                                                "ip": ipAdd,
                                                "netmask": MacAdd
                                            }
                                        ]
                                    },
                    "ietf-ip:ipv6": {}
                                                }
                        }
            resp = requests.put(api_urlLo,data=json.dumps(yangConfig),auth=basic_auth,headers=headers,verify=False)
            if(resp.status_code >= 200 and resp.status_code <= 299):
                print("\n INTERFAZ CREADA CORRECTAMENTE !!!")   
            elif(resp.status_code == 400):
                print("\n DATO INCOMPLETO, MAL INTRODUCIDO O DIRECCIONAMIENTO REPETIDO")    
        elif y == 'd':
            z = input('Configuración que quiere eliminar \na. Interfaz\nb. SubInterfaz\nc. LoopBack\n')
            if z == 'a':
                InterNumber=input('Numero de Interfaz: ')            
                config_commands=['int Gi '+InterNumber,'shutdown','no ip add']
                sshcli=ConnectHandler(device_type='cisco_ios',host='192.168.214.101',port=22,username='cisco',password='cisco123!')
                output=sshcli.send_config_set(config_commands)
                print("Interfaz Desconfigurada. Confirme con la Opción a")           
            elif z == 'b':
                InterNumber=input('Numero de SubInterfaz (ejemplo 1.2): ')
                api_urlGi = "https://192.168.214.101/restconf/data/ietf-interfaces:interfaces/interface=GigabitEthernet"+InterNumber 
                headers = {"Accept":"application/yang-data+json","Content-Type":"application/yang-data+json"}
                basic_auth = ("cisco","cisco123!")
                resp = requests.delete(api_urlGi,auth=basic_auth,headers=headers,verify=False)
                if(resp.status_code >= 200 and resp.status_code <= 299):
                    print("\n INTERFAZ ELIMINADA CORRECTAMENTE !!!")   
                elif(resp.status_code == 400):
                    print("\n INTERFAZ INCORRECTA")
            elif z == 'c':
                InterNumber=input('Numero de Loopback ')
                api_urlLo = "https://192.168.214.101/restconf/data/ietf-interfaces:interfaces/interface=Loopback"+InterNumber 
                headers = {"Accept":"application/yang-data+json","Content-Type":"application/yang-data+json"}
                basic_auth = ("cisco","cisco123!")
                resp = requests.delete(api_urlLo,auth=basic_auth,headers=headers,verify=False)
                if(resp.status_code >= 200 and resp.status_code <= 299):
                    print("\n INTERFAZ ELIMINADA CORRECTAMENTE !!!")   
                elif(resp.status_code == 400):
                    print("\n INTERFAZ INCORRECTA")
    elif x == '3':
        clear()
        config_commands=['do show ip route | b Gate']
        sshcli=ConnectHandler(device_type='cisco_ios',host='192.168.214.101',port=22,username='cisco',password='cisco123!')
        output=sshcli.send_config_set(config_commands)
        print("Tablas de Rutas:\n{}".format(output))
    elif x == '4':
        clear()
        api_urlIOS = "https://192.168.214.101/restconf/data/Cisco-IOS-XE-native:native/version"
        api_urlHostname="https://192.168.214.101/restconf/data/Cisco-IOS-XE-native:native/hostname"
        api_urlModel="https://192.168.214.101/restconf/data/Cisco-IOS-XE-native:native/license/udi/pid"
        api_urlSN="https://192.168.214.101/restconf/data/Cisco-IOS-XE-native:native/license/udi/sn"
        headers = {"Accept":"application/yang-data+json","Content-Type":"application/yang-data+json"}
        basic_auth = ("cisco","cisco123!")
        resp1 = requests.get(api_urlIOS,auth=basic_auth,headers=headers,verify=False)
        resp2 = requests.get(api_urlHostname,auth=basic_auth,headers=headers,verify=False)
        resp3 = requests.get(api_urlModel,auth=basic_auth,headers=headers,verify=False)
        resp4 = requests.get(api_urlSN,auth=basic_auth,headers=headers,verify=False)
        response_json1 = resp1.json()
        response_json2 = resp2.json()
        response_json3 = resp3.json()
        response_json4 = resp4.json()
        print("La versión IOS del Router es: "+response_json1["Cisco-IOS-XE-native:version"]+"\nEl hostname del Equipo es: "+response_json2["Cisco-IOS-XE-native:hostname"]
                +"\nEl Modelo es: "+response_json3["Cisco-IOS-XE-native:pid"]+"\nEl Serial Number es: "+response_json4["Cisco-IOS-XE-native:sn"])
        ChangeHostname=input("\nSi desea cambiar su Hostname presione la tecla C (En Mayúscula). Si no presione Enter ")
        if ChangeHostname == 'C':
            hostname=input("Indique el nuevo Hostname ")
            ConfigHostname={"Cisco-IOS-XE-native:hostname": hostname}
            resp3 = requests.put(api_urlHostname,data=json.dumps(ConfigHostname),auth=basic_auth,headers=headers,verify=False)
            if(resp3.status_code >= 200 and resp.status_code <= 299):
                print("\n Hostname Cambiado Correctamente")
    elif x == '0'or x == '':       
        break
    else:
        print("Opción NO valida, intente de nuevo.")
